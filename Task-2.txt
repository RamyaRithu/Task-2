Q.1)Create a class Person with properties (name and age) with following features.
a.	Default age of person should be 18;
b.	A person object can be initialized with name and age;
c.	Method to display name and age of person


Answer:
package com.oopscocept;

public class Person1  {
	    public String name;
	    public int age;

	    // Constructor with default age
	    public Person1(String name) {
	        this.name = name;
	        this.age = 18; // Default age
	    }

	    // Constructor with specified name and age
	    public Person1(String name, int age) {
	        this.name = name;
	        this.age = age;
	    }

	    // Method to display name and age of person
	    public void display() {
	        System.out.println("Name: " + name);
	        System.out.println("Age: " + age);
	    }

	    public static void main(String[] args) {
	        // Creating objects of Person class
	        Person1 p = new Person1("Ramya");
	        p.display();
	        
	        
	    }
	}
output:
Name:Ramya
Age:18

2) Create class Product (pid, price, quantity) with parameterized constructor. Create a main function in different class (say XYZ) and perform following task:
a.	Accept five product information from user and store in an array
b.	Find Pid of the product with the highest price.
c.	Create method (with array of product's object as argument) in XYZ class to calculate and return the total amount spent on all products. (amount spent on single product=price of product * quantity of product
 
Answer:

package com.oopscocept;


class Product {
		    int pid;
		    double price;
		    int quantity;

		    // Parameterized Constructor
		    public Product(int pid, double price, int quantity) {
		        this.pid = pid;
		        this.price = price;
		        this.quantity = quantity;
		    }
		}



package com.oopscocept;

import java.util.Scanner;

public class Textproduct {
	
	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);

	        // Accept five product information from user and store in an array
	        Product[] products = new Product[5];
	        for (int i = 0; i < 5; i++) {
	            System.out.println("Enter product ID:");
	            int pid = scanner.nextInt();
	            System.out.println("Enter price:");
	            double price = scanner.nextDouble();
	            System.out.println("Enter quantity:");
	            int quantity = scanner.nextInt();

	            // Create Product object and store in the array
	        }

	        // Find Pid of the product with the highest price
	        int maxPricePid = findMaxPricePid(products);
	        System.out.println("Pid of the product with the highest price: " + maxPricePid);

	        // Calculate and return the total amount spent on all products
	        double totalAmountSpent = calculateTotalAmountSpent(products);
	        System.out.println("Total amount spent on all products: " + totalAmountSpent);

	        scanner.close();
	    }

	    // Method to find Pid of the product with the highest price
	    private static int findMaxPricePid(Product[] products) {
	        int maxPricePid = -1;
	        double maxPrice = Double.MIN_VALUE;

	        for (Product product : products) {
	            if (product.price > maxPrice) {
	                maxPrice = product.price;
	                maxPricePid = product.pid;
	            }
	        }

	        return maxPricePid;
	    }

	    // Method to calculate and return the total amount spent on all products
	    private static double calculateTotalAmountSpent(Product[] products) {
	        double totalAmountSpent = 0;

	        for (Product product : products) {
	            totalAmountSpent += product.price * product.quantity;
	        }

	        return totalAmountSpent;
	    }
	

}



3)Create Class Account with data member As Balance . Create two constructors (no argument, and two arguments) and perform following task
a.	method to deposit the amount to the account .
b.	method to withdraw the amount from the account .
c.	method to display the Balance .


package com.oopscocept;


public class Account {
    private double balance;

    // Constructor with no arguments
    public Account() {
        this.balance = 0.0; // Initializing balance to zero
    }

    // Constructor with  arguments
    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    // Method to deposit amount to the account
    public void deposit(double amount) {
        if (amount > 0) {
            balance = balance +amount;
            System.out.println("Deposit successful. New balance: " + balance);
        } else {
            System.out.println("Invalid amount for deposit.");
        }
    }

    // Method to withdraw amount from the account
    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance = balance-amount;
            System.out.println("Withdrawal successful. New balance: " + balance);
        } else {
            System.out.println("Invalid amount for withdrawal or insufficient balance.");
        }
    }

    // Method to display the balance
    public void displayBalance() {
        System.out.println("Current Balance: " + balance);
    }

    public static void main(String[] args) {
       
        Account account1 = new Account();

        
        account1.deposit(1000);
        account1.withdraw(500);
        account1.displayBalance();

        
    }
}

output:
Deposit successful. New balance: 1000.0
Withdrawal successful. New balance: 500.0
Current Balance: 500.0




1.4) Define a base class Person with attributes name and age.
Create a subclass Employee that inherits from Person and adds attributes like employeelD and salary.
Use the super keyword to initialize the Person attributes in the Employee constructor.

Answer:

package com.oopscocept;

//Base class Person
class Person {
 String name;
 int age;

 // Constructor
 public Person(String name, int age) {
     this.name = name;
     this.age = age;
 }
}

//Subclass Employee inheriting from Person
class Employee extends Person {
 int employeeID;
 double salary;

 // Constructor
 public Employee(String name, int age, int employeeID, double salary) {
     super(name, age); // Initialize Person attributes using super keyword
     this.employeeID = employeeID;
     this.salary = salary;
 }

 public class Test{

     public static void main(String[] args)
     
     {
     
     Employee employee = new Employee("Ramya", 25, 1001, 50000.0);
     System.out.println("Employee Name: " + employee.name);
     System.out.println("Employee Age: " + employee.age);
     System.out.println("Employee ID: " + employee.employeeID);
     System.out.println("Employee Salary: $" + employee.salary);
 }
}
}

output:
Employee Name:Ramya
Employee Age:25
Employee ID:1001
Employee Salary:50000.0



